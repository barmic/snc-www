---
import parseDate from '../utils.js';
import edition from '../data/current.yaml';
const lang = (Astro.locals as any).lang;

const startFormat = Intl.DateTimeFormat(lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
const open = startFormat.format(parseDate(edition.timeline.cfp.open));
const close = startFormat.format(parseDate(edition.timeline.cfp.close));
const notification = startFormat.format(parseDate(edition.timeline.cfp.notification));
const startFormatSnowcamp = Intl.DateTimeFormat(lang, {
  month: 'short',
  day: 'numeric',
});
const endFormatSnowcamp = Intl.DateTimeFormat(lang, {
  year: 'numeric',
  month: 'short',
  day: 'numeric',
});
const start = startFormatSnowcamp.format(parseDate(edition.start_date));
const end = endFormatSnowcamp.format(parseDate(edition.end_date));
---
<style>
  .timeline {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    padding: 0 1rem;
  }

  h2 {
    font-size: 24px;
    color: var(--orange);
  }

  .step {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0 1rem;
    border-width: 1px;
    border-color: lightgrey;
    border-style: solid;
  }
</style>
<div class="timeline">
  <div class="step">
    <h2>{edition.timeline.cfp.open[lang]}</h2>
    <p>{open}</p>
  </div>
  <div class="step">
    <h2>{edition.timeline.cfp.close[lang]}</h2>
    <p>{close}</p>
  </div>
  <div class="step">
    <h2>{edition.timeline.cfp.notification[lang]}</h2>
    <p>{notification}</p>
  </div>
  <div class="step">
    <h2>Snowcamp</h2>
    <p>{start} - {end}</p>
  </div>
</div>
