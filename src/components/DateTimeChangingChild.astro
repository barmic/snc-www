---
const { beginDate, endDate } = Astro.props;
---
<astro-interval-reloader data-begindate={beginDate}  data-enddate={endDate}>
  <span class="step">
    <slot name="before"></slot>
  </span>
  <span class="step">
    <slot name="doing"></slot>
  </span>
  <span class="step">
    <slot name="after"></slot>
  </span>
</astro-interval-reloader>

<script>
  // Create your custom class for catching the parameter
  class IntervalReloader extends HTMLElement {
    constructor() {
      super();
      const beginDate= this.dataset.begindate ? Number.parseInt(this.dataset.begindate, 10) : 0;
      const endDate= this.dataset.enddate ? Number.parseInt(this.dataset.enddate, 10) : Number.MAX_SAFE_INTEGER;

      const steps: HTMLElement[] = [... this.childNodes].filter((child) => child.classList.contains('step'));

      if (beginDate) {
        this.computeVisibility(beginDate, endDate, steps);
        setInterval(() => this.computeVisibility(beginDate, endDate, steps), 1000);
      }
    }
    private computeVisibility(beginDate:number, endDate:number, steps: HTMLElement[]) {
      let now = new Date().getTime();
      if (now < beginDate) {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [false, true, true];
      } else if (endDate && endDate < now) {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [true, false, true];
      } else {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [true, true, false];
      }
    }
  }

  customElements.define('astro-interval-reloader', IntervalReloader);
</script>
