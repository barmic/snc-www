---
const { beginDate, endDate, refreshInterval } = Astro.props;
---
<astro-interval-reloader data-begindate={beginDate}  data-enddate={endDate} data-refreshinterval={refreshInterval}>
  <span class="step">
    <slot name="before"></slot>
  </span>
  <span class="step">
    <slot name="doing"></slot>
  </span>
  <span class="step">
    <slot name="after"></slot>
  </span>
</astro-interval-reloader>

<script>
  // Create your custom class for catching the parameter
  class IntervalReloader extends HTMLElement {
    intervalId = -1;
    constructor() {
      super();
      const beginDate= this.dataset.begindate ? Number.parseInt(this.dataset.begindate, 10) : 0;
      const endDate= this.dataset.enddate ? Number.parseInt(this.dataset.enddate, 10) : Number.MAX_SAFE_INTEGER;
      const refreshInterval = this.dataset.refreshinterval ? Number.parseInt(this.dataset.refreshinterval, 10) : 1000;

      const steps: HTMLElement[] = [... this.childNodes].filter((child) => child.classList.contains('step'));

      if (beginDate) {
        this.computeVisibility(beginDate, endDate, steps);
        if (!this.isTooFar()) {
          this.intervalId = setInterval(() => this.computeVisibility(beginDate, endDate, steps), refreshInterval);
        }
      }
    }
    private computeVisibility(beginDate: number, endDate: number, steps: HTMLElement[]) {
      const now = new Date().getTime();
      if (now < beginDate) {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [false, true, true];
      } else if (endDate && endDate < now) {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [true, false, true];
      } else {
        [steps[0].hidden, steps[1].hidden, steps[2].hidden] = [true, true, false];
        this.cancelInterval();
      }
    }

    private cancelInterval() {
      if (this.intervalId > 0) {
        clearInterval(this.intervalId);
      }
      this.intervalId = -1;
    }

    private isTooFar(limit: number): boolean {
      const now = new Date().getTime();
      return (limit - now) > (24 * 3600 * 1000);
    }
  }

  customElements.define('astro-interval-reloader', IntervalReloader);
</script>
