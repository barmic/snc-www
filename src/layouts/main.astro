---
import { getRelativeLocaleUrl } from 'astro:i18n';
export interface Props {
	title: string;
}
const lang = (Astro.locals as any).lang;

import Footer from '../components/Footer.astro';
import NewMenu from '../components/NewMenu.astro';
import '../styles/reset.css';
import '../styles/style.css';
import '../styles/main.css';
import 'font-awesome/css/font-awesome.css';

const currentUrl = new URL("/editions/current.json", Astro.url);
const response = await fetch(currentUrl);
const current = await response.json();

const sponsors = current.sponsorship;
const timeline = current.timeline;

const {frontmatter} = Astro.props;
---
<style>
  body {
    display: flex;
    flex-direction: column;
  }

  footer {
    width: 100%;
    height: 100%;
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: row;
    background-color: #2e2841;
    gap: 15px;
  }
  header {
    background-color: #2e2841;
    color: white;
    padding: 0;

    /* keep header sticky */
    z-index: 1000;
    position: sticky;
    top: 0;
    left: 0;

    /* organize content */
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
    flex-wrap: wrap;
  }

  main {
    display: grid;
    grid-template-columns: 1fr 1fr min(100ch, 100%) 1fr 1fr;
    & > :not(header,footer) {
      grid-column: 3;
    }
  }
</style>
<!DOCTYPE html>
<html class="no-js" lang={lang} prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#">
<head>
	<meta charset="utf-8">
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<link href="/js/semantic/step.css" rel="stylesheet" type="text/css" />
	<link rel="shortcut icon" type="image/png" href="/img/favicon/favicon.png">
	<link rel="canonical" href="">
	<title>{frontmatter.title}</title>
</head>
<body lang={lang}>
  <header class="full-bleed">
    <a href={getRelativeLocaleUrl(lang, '/')}>
      <img style="max-width: 170px" src="/img/alpes-snow-full-illustration.webp" alt="Logo">
    </a>
    <NewMenu></NewMenu>
  </header>
  <main>
	<slot />
  </main>
  <Footer></Footer>
</body>

<script id="esnlrtsnrt" define:vars={{ sponsors, timeline }}>
  const hideTimeline = (timelineEvent, name) => {
    const openingTime = Date.parse(timelineEvent.open);
    const closingTime = Date.parse(timelineEvent.close);
    const now = new Date().getTime();
    if (now < openingTime) {
      return [`${name}Opened`, `${name}Closed`];
    } else if (now < closingTime) {
      return [`${name}Closed`, `${name}Before`];
    } else {
      return [`${name}Opened`, `${name}Before`];
    }
  }
  const sponsoring = (sponsors, timeline) => {
    const openingTime = Date.parse(timeline.open);
    const remainEtoile = sponsors.type.etoile.number - sponsors.etoile.length;
    const remainFlocon = sponsors.type.flocon.number - sponsors.flocon.length;
    const now = new Date().getTime();
    if (now < openingTime) {
      return ['sponsorOpened', 'sponsorClosed'];
    } else if (remainEtoile > 0 || remainFlocon > 0) {
      return ['sponsorClosed', 'sponsorBefore'];
    } else {
      return ['sponsorOpened', 'sponsorBefore'];
    }
  }
  const computeStyle = () => {
    const classToHide = [
      ...sponsoring(sponsors, timeline.sponsor),
      ...Object.keys(timeline).filter((timel) => timel !== 'sponsor').flatMap((timel) => hideTimeline(timeline[timel], timel)),
    ];

    classToHide.sort();

    return classToHide
      .map((name) => `.${name} {display:none !important;}`)
      .join('\n');
  }

  const style = document.createElement('style');
  style.id = 'conditional';
  document.head.appendChild(style);

  style.textContent = computeStyle();
  setInterval(() => style.textContent = computeStyle(), 10000);
</script>
